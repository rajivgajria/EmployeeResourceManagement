/**
 * Defines a data model for a Employee Management Business Network
 */
namespace org.hyperledgercomposer.erm

/**
 * Enumerated type definitions
 */
enum Degree {
  o Bachelor
  o Master
  o Phd
}

/**
 * Comcept definitions
 */
concept Address {
    o String street
    o String house
    o String city
    o String county
    o String country
    o String zip
}

concept Education {
 o Degree degree 
 o String specialization  
 o String institution 
}

concept EmployeeSkill  {	
 o String skill
 o String yearsOfExperience
}

concept EmployeeStatus {

  o Employer previousEmployer
  o DateTime previousExitDate
  o Employer currentEmployer
  o DateTime dateHired
  
  //o String previousEmployer 
  /*o String previousClient */ 
}

concept	Client {
  o String clientId
  o String clientName
  o Address headQuarters 
  o String sector optional
}

concept	Project {
  o String projectId
  o String projectName
  o String clientId
}

concept	Allocation {
  o String projectId
  o String projectName
  o Double allocationPercentage
}

/*
Assuming that the Employee will be working with one client only and will have a contract with him.
*/
concept Contract{

  o String clientId
  o String EmployerId
  o DateTime startDate
  o DateTime endDate
  //Have to revisit whether this is required or not
  //o String[] restrictedEmployers //This can be in the contract as it is required so that the Employee does not work directly with the Competitor on the same Client 
}

/**
 * Asset definitions
 */
asset Employee identified by employeeId {
  o String employeeId  
  o String[] email
  o String firstName
  o String lastName
  o DateTime dob optional
  o Address address optional
  o String SSN optional 
  o Education[] education
  o Integer TotalYearsOfExperience optional
  o EmployeeSkill[] EmployeeSkill 
  o EmployeeStatus employeeStatus
  //o Allocation[] projectAllocation
  o Contract[] contract
  //--> Employer employer
  /*-> Department department */
}

/**
 * Participant definitions
 */
/*
participant Department identified by DepartmentId {
  o String DepartmentId 
  o String Name
  o Project[] project
  --> Employer employer
}
*/

participant	Employer identified by EmployerId {
 		o String EmployerId
		o String Name
        o Address headQuarters 
		o Project[] project 
}

/**
 * Transaction definitions
 */
transaction IntraCompanyTransfer {
}

transaction EmployeeOnBoard{


}

transaction AssignClient{
  
}

transaction TransferEmployee {
  --> Employee employee 
  --> Employer futureEmployer 
  --> Employer currentEmployer
  o DateTime dateOfEmployeeTransfer
}

